name: Train and Deploy Model

on:
  push:
    branches: [ main ]

jobs:
  experiment:
    name: Train Model - Development
    runs-on: ubuntu-latest
    environment: development
    steps:
    - name: Check out repo
      uses: actions/checkout@v4
      
    - name: Install az ml extension
      run: az extension add -n ml -y
      
    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CRED_LOGIN_SP_DEV_ENV}}
        
    - name: Trigger Azure ML experiment job
      run: |
        echo "Submitting Azure ML job..."
        job_name=$(az ml job create --file src/job-dev.yml --resource-group todozi-data-science-rg --workspace-name todozi-ml-ws --query name -o tsv)
        echo "Job submitted with name: $job_name"
        echo "job_name=$job_name" >> $GITHUB_OUTPUT
      id: submit_job
      # This uses the diabetes-dev-folder dataset as configured in job-dev.yml
      
    - name: Wait for Azure ML job completion
      run: |
        job_name="${{ steps.submit_job.outputs.job_name }}"
        echo "Waiting for job $job_name to complete..."
        
        max_attempts=240  # 2 hours max (240 * 30 seconds)
        attempt=0
        
        while [ $attempt -lt $max_attempts ]; do
          attempt=$((attempt + 1))
          
          # Get job status with error handling
          if ! status=$(az ml job show --name $job_name --resource-group todozi-data-science-rg --workspace-name todozi-ml-ws --query status -o tsv 2>/dev/null); then
            echo "❌ Failed to get job status (attempt $attempt/$max_attempts)"
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ Max attempts reached, failing workflow"
              exit 1
            fi
            sleep 30
            continue
          fi
          
          echo "Current job status: $status (attempt $attempt/$max_attempts)"
          
          # Convert to lowercase for case-insensitive comparison
          status_lower=$(echo "$status" | tr '[:upper:]' '[:lower:]')
          
          case $status_lower in
            "completed")
              echo "✅ Job completed successfully!"
              exit 0
              ;;
            "failed"|"canceled")
              echo "❌ Job failed with status: $status"
              exit 1
              ;;
            "notstarted"|"running"|"queued"|"preparing"|"provisioning")
              echo "⏳ Job still running (status: $status), waiting 30 seconds..."
              sleep 30
              ;;
            *)
              echo "⚠️ Unknown job status: $status, treating as running..."
              sleep 30
              ;;
          esac
        done
        
        echo "❌ Job did not complete within 2 hours, failing workflow"
        exit 1

  production:
    name: Train Model - Production
    runs-on: ubuntu-latest
    environment: production
    needs: experiment
    steps:
    - name: Check out repo
      uses: actions/checkout@v4
      
    - name: Install az ml extension
      run: az extension add -n ml -y
      
    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CRED_LOGIN_SP_PROD_ENV}}
        
    - name: Trigger Azure ML production job
      run: |
        echo "Submitting Azure ML production job..."
        job_name=$(az ml job create --file src/job-prod.yml --resource-group todozi-data-science-rg --workspace-name todozi-ml-ws --query name -o tsv)
        echo "Production job submitted with name: $job_name"
        echo "job_name=$job_name" >> $GITHUB_OUTPUT
      id: submit_prod_job
      # This will use the diabetes-prod-folder dataset as configured in job-prod.yml
      
    - name: Wait for Azure ML production job completion
      run: |
        job_name="${{ steps.submit_prod_job.outputs.job_name }}"
        echo "Waiting for production job $job_name to complete..."
        
        max_attempts=240  # 2 hours max (240 * 30 seconds)
        attempt=0
        
        while [ $attempt -lt $max_attempts ]; do
          attempt=$((attempt + 1))
          
          # Get job status with error handling
          if ! status=$(az ml job show --name $job_name --resource-group todozi-data-science-rg --workspace-name todozi-ml-ws --query status -o tsv 2>/dev/null); then
            echo "❌ Failed to get production job status (attempt $attempt/$max_attempts)"
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ Max attempts reached, failing workflow"
              exit 1
            fi
            sleep 30
            continue
          fi
          
          echo "Current production job status: $status (attempt $attempt/$max_attempts)"
          
          # Convert to lowercase for case-insensitive comparison
          status_lower=$(echo "$status" | tr '[:upper:]' '[:lower:]')
          
          case $status_lower in
            "completed")
              echo "✅ Production job completed successfully!"
              exit 0
              ;;
            "failed"|"canceled")
              echo "❌ Production job failed with status: $status"
              exit 1
              ;;
            "notstarted"|"running"|"queued"|"preparing"|"provisioning")
              echo "⏳ Production job still running (status: $status), waiting 30 seconds..."
              sleep 30
              ;;
            *)
              echo "⚠️ Unknown production job status: $status, treating as running..."
              sleep 30
              ;;
          esac
        done
        
        echo "❌ Production job did not complete within 2 hours, failing workflow"
        exit 1
        
    # ========================================
    # STEP: Register the model from the production job
    # ========================================
    # After training completes successfully, we register the model
    # This makes it available in the Azure ML Model Registry for deployment
    - name: Register model from production job
      run: |
        job_name="${{ steps.submit_prod_job.outputs.job_name }}"
        echo "📦 Registering model from production job: $job_name"
        
        # Register the model from the completed job's output
        # MLflow autologging saved the model to "outputs/artifacts/model"
        az ml model create \
          --name diabetes-model \
          --type mlflow_model \
          --path "azureml://jobs/$job_name/outputs/artifacts/model" \
          --resource-group todozi-data-science-rg \
          --workspace-name todozi-ml-ws
        
        # Get the version that was just registered
        model_version=$(az ml model show \
          --name diabetes-model \
          --resource-group todozi-data-science-rg \
          --workspace-name todozi-ml-ws \
          --query version \
          -o tsv | head -n 1)
        
        echo "✅ Model registered successfully!"
        echo "   Name: diabetes-model"
        echo "   Version: $model_version"
        echo ""
        echo "🎯 Next Steps:"
        echo "   1. Go to Azure ML Studio → Models to see your registered model"
        echo "   2. Run the '07-deploy-model' workflow to deploy this model to an endpoint"
        
        # Save the model version for potential future steps
        echo "model_version=$model_version" >> $GITHUB_OUTPUT
      id: register_model
 